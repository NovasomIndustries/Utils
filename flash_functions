#!/bin/bash

init_usd () {
#########################################################
# Name		: init_usd
# Op     	: initializes the uSD
# Params 	:
# 			${1} is number of user partition
# 			${2} is size of first user partition, if enabled
# 			${3} is size of second user partition, if enabled
# 			${4} is the device
# 			${5} is the board name
#########################################################
NUMBER_OF_USR_PARTITIONS=${1}
SIZE_OF_FIRST_PARTITION=${2}
SIZE_OF_2ND_PARTITION=${3}
DISK=${4}
BOARD_NAME=${5}
[ "${1}" = "" ] && ${NUMBER_OF_USR_PARTITIONS}="-" # Defaults to no user partitions
[ "${2}" = "" ] && ${SIZE_OF_FIRST_PARTITION}="16"
[ "${3}" = "" ] && ${SIZE_OF_2ND_PARTITION}="16"
[ "${4}" = "" ] && ${DISK}="/dev/sdb"
[ "${5}" = "" ] && ${BOARD_NAME}="NOVAsomP" # Defaults to P
SPL_FILE="../Bootloader/u-boot-novasom-2015.04/${BOARD_NAME}/SPL"
UBOOT_IMG="../Bootloader/u-boot-novasom-2015.04/${BOARD_NAME}/u-boot.img"

echo "Number of user partition is ${NUMBER_OF_USR_PARTITIONS}"
echo "Size of first user partition is ${SIZE_OF_FIRST_PARTITION}"
echo "Size of second user partition is ${SIZE_OF_2ND_PARTITION}"
echo "The device is ${DISK}"
echo "The BOARD_NAME is ${BOARD_NAME}"
echo "The SPL_FILE is ${SPL_FILE}"

[ ! -b ${DISK} ] && echo "${DISK} not found"
[ ! -b ${DISK} ] && return 1
sudo umount ${DISK}* >/dev/null 2>&1
echo "Writing ${BOARD_NAME} uSD"
sleep 1
sudo echo -n "Writing u-boot ... "
sudo dd if=/dev/zero of=${DISK} bs=4M count=1; sync
sudo dd if=${SPL_FILE} of=${DISK} bs=1k seek=1; sync
sync

if [ "${NUMBER_OF_USR_PARTITIONS}" = "-" ]; then
echo "No user partition"
	sudo fdisk ${DISK} << __EOF__
d
1
d
2
d
3
d
4
n
p
1

+192M
t
b
n
p
3

+16M
t
3
83
w
__EOF__

fi
if [ "${NUMBER_OF_USR_PARTITIONS}" = "1" ]; then
echo "${NUMBER_OF_USR_PARTITIONS} user partition of ${SIZE_OF_FIRST_PARTITION} size"
	sudo fdisk ${DISK} << __EOF__
d
1
d
2
d
3
d
4
n
p
1

+192M
t
b
n
p
3

+16M
t
3
83
n
p
2

+${SIZE_OF_FIRST_PARTITION}M
t
3
83
w
__EOF__

fi

if [ "${NUMBER_OF_USR_PARTITIONS}" = "2" ]; then
echo "${NUMBER_OF_USR_PARTITIONS} user partition of ${SIZE_OF_FIRST_PARTITION} size and ${SIZE_OF_2ND_PARTITION} size"
	sudo fdisk ${DISK} << __EOF__
d
1
d
2
d
3
d
4
n
p
1

+192M
t
b
n
p
3

+16M
t
2
83
n
p
2

+${SIZE_OF_FIRST_PARTITION}M
t
2
83

n
p

+${SIZE_OF_2ND_PARTITION}M
t
4
83
w
__EOF__

fi
sync
return $?
}

format_usd () {
#########################################################
# Name          : format_usd
# Op            : formats the uSD
# Params        :
#               	${1} is number of user partition
#               	${2} is the device
#########################################################
sync
[ "${1}" = "" ] && ${1}="-" # Defaults to no user partitions
[ "${2}" = "" ] && ${2}="/dev/sdb"
DISK=${2}
echo "Number of user partition is $1"
echo "The device is $2"

echo y | sudo mkfs.vfat -F 16 ${DISK}1 -n BOOT
RET=$?
echo "mkfs.vfat returned $RET"
if ! [ "$?" = "0" ]; then
        echo "mkfs.vfat with error $RET"
        return 1
fi

echo y | sudo mkfs.ext3 -t ext3 -L Config ${DISK}3
RET=$?
echo "mkfs.ext3 returned $RET"
if ! [ "$?" = "0" ]; then
        echo "mkfs.ext3 with error $RET"
        return 1
fi

if [ "${1}" = "1" ]; then
        echo y | sudo sudo mkfs.ext3 -t ext3 -L user1 ${DISK}2
        RET=$?
        echo "mkfs.ext3 returned $RET"
        if ! [ "$?" = "0" ]; then
                echo "mkfs.ext3 with error $RET"
                return 1
        fi
fi
if [ "${1}" = "2" ]; then
        echo y | sudo sudo mkfs.ext3 -t ext3 -L user1 ${DISK}4
        RET=$?
        echo "mkfs.ext3 returned $RET"
        if ! [ "$?" = "0" ]; then
                echo "mkfs.ext3 with error $RET"
                return 1
        fi
        echo y | sudo mkfs.ext3 -t ext3 -L user2 ${DISK}4
        RET=$?
        echo "mkfs.ext3 returned $RET"
        if ! [ "$?" = "0" ]; then
                echo "mkfs.ext3 with error $RET"
                return 1
        fi
fi
return 0
}

store_bin() {
#########################################################
# Name          : store_bin
# Op            : write the files on the uSD
# Params        :
#               	${1} is the device
# 			${2} is the BOARD_NAME
# 			${3} is the DTB_FILE for solo/dl
# 			${4} is the DTB_FILE for quad
#########################################################
[ "${1}" = "" ] && ${1}="/dev/sdb"
[ "${2}" = "" ] && ${2}="NOVAsomP" # Defaults to P
[ "${3}" = "" ] && ${3}="imx6sdl-novasomP.dtb" # Defaults to P HDMI
[ "${4}" = "" ] && ${4}="imx6q-novasomP.dtb" # Defaults to P HDMI
DISK=${1}
BOARD_NAME=${2}
UBOOT_IMG="../Bootloader/u-boot-novasom-2015.04/${BOARD_NAME}/u-boot.img"
DTB_FILESDL=${3}
DTB_FILEQ=${4}

KERNEL="linux-imx_4.1.15_1.2.0_ga"
echo "The device is ${DISK}"
echo "The BOARD_NAME is ${BOARD_NAME}"
echo "The UBOOT_IMG is ${UBOOT_IMG}"
echo "The DTB_FILESDL is ${DTB_FILESDL}"
echo "The DTB_FILEQ is ${DTB_FILEQ}"
echo "The KERNEL is ${KERNEL}"

[ "${BOARD_NAME}" == "NOVAsomP" ] && BOARD_DTB="*novasomP*.dtb"
[ "${BOARD_NAME}" == "NOVAsomS" ] && BOARD_DTB="*novasomS*.dtb"
[ "${BOARD_NAME}" == "NOVAsomU" ] && BOARD_DTB="*novasomU*.dtb"

[ "${BOARD_NAME}" == "NOVAsomP" ] && DEST_BOARD_DTB="novasomP"
[ "${BOARD_NAME}" == "NOVAsomS" ] && DEST_BOARD_DTB="novasomS"
[ "${BOARD_NAME}" == "NOVAsomU" ] && DEST_BOARD_DTB="novasomU"

rm -rf tmpmount
mkdir tmpmount
sleep 1
sudo mount ${DISK}1 tmpmount
[ "$?" != "0" ] && return 1
echo -n "Copying ${UBOOT_IMG} ..."
sudo cp ${UBOOT_IMG} tmpmount/.
RET=${?}
[ "${RET}" != "0" ] && sudo umount tmpmount
[ "${RET}" != "0" ] && return 1
echo "Done"
echo -n "Copying ${BOARD_DTB} dtb files ..."
sudo mkdir tmpmount/dtb
sudo cp ../Kernel/${KERNEL}/arch/arm/boot/dts/${BOARD_DTB} tmpmount/dtb/.
RET=${?}
[ "${RET}" != "0" ] && sudo umount tmpmount
[ "${RET}" != "0" ] && return 1
echo "Done"
cd tmpmount
sudo cp dtb/${DTB_FILESDL} imx6sdl-${DEST_BOARD_DTB}.dtb
sudo cp dtb/${DTB_FILEQ} imx6q-${DEST_BOARD_DTB}.dtb
cd ..
echo "Done"
echo -n "Copying zImage ..."
sudo cp ../Deploy/zImage tmpmount/.
RET=${?}
[ "${RET}" != "0" ] && sudo umount tmpmount
[ "${RET}" != "0" ] && return 1
echo "Done"
echo -n "Copying uInitrd ..."
sudo cp ../Deploy/uInitrd tmpmount/.
RET=${?}
[ "${RET}" != "0" ] && sudo umount tmpmount
[ "${RET}" != "0" ] && return 1
echo "Done"
sudo umount tmpmount
sync
return 0
}
